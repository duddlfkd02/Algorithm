/* 🧠 문제 설명

은행에 N명의 사람이 줄을 서 있습니다.
각 사람마다 ATM에서 돈을 인출하는 데 걸리는 시간이 주어질 때,
다음 사람이 기다리는 시간의 합이 최소가 되도록 줄을 재배열하려 합니다.
	•	사람 i가 걸리는 인출 시간이 times[i]일 때,
	•	줄에서 앞사람들의 인출이 모두 끝나야 자신의 인출을 시작할 수 있으므로
	•	사람 i가 기다리는 시간은 자신의 인출 시간뿐 아니라 앞에 선 모든 사람의 인출 시간도 포함됩니다.

예를 들어 인출 시간이 [3, 1, 4, 3]이라면,
줄을 [1, 3, 3, 4] 순으로 세우면
	•	1번 사람 대기 시간 = 1
	•	2번 사람 대기 시간 = 1 + 3 = 4
	•	3번 사람 대기 시간 = 1 + 3 + 3 = 7
	•	4번 사람 대기 시간 = 1 + 3 + 3 + 4 = 11

→ 총 대기 시간 합 = 1 + 4 + 7 + 11 = 23

이처럼 총합을 최소화하려면 가장 짧은 시간부터 먼저 처리하는 것이 그리디 최적 해답입니다.

✅ 입력
	•	times: 길이 N인 양의 정수 배열 (1 ≤ N ≤ 1000, 각 원소 ≤ 1000)

✅ 출력
	•	줄을 최적 순서로 재배열했을 때의 총 대기 시간 합 (int)

input: [3, 1, 4, 3]
output: 23
*/
const times = [3, 1, 4, 3];

function solution(times) {
  times.sort((a, b) => a - b);
  let sum = 0;
  let totalTimes = 0;

  for (const time of times) {
    sum += time;
    totalTimes += sum;
  }

  return totalTimes;
}
console.log(solution(times));
